/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
export default (function() {
  "use strict";

  function P$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function P$SE(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, P$SE);
    }
  }

  P$subclass(P$SE, Error);

  P$SE.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function P$parse(input, options) {
    options = options !== void 0 ? options : {};

    var P$F = {},

        P$sRFs = { start: P$parsestart },
        P$sRF  = P$parsestart,

        P$c0 = P$oE("whitespace"),
        P$c1 = /^[ \t\r\n]/,
        P$c2 = P$classExpectation([" ", "\t", "\r", "\n"], false, false),
        P$c3 = P$oE("number"),
        P$c4 = /^[0-9]/,
        P$c5 = P$classExpectation([["0", "9"]], false, false),
        P$c6 = P$oE("alpha or underscore character"),
        P$c7 = /^[a-z]/i,
        P$c8 = P$classExpectation([["a", "z"]], false, true),
        P$c9 = /^[_]/,
        P$c10 = P$classExpectation(["_"], false, false),
        P$c11 = P$oE("word character"),
        P$c12 = function(word) {
              return word
            },
        P$c13 = P$oE("shape block"),
        P$c14 = "{",
        P$c15 = P$literalExpectation("{", false),
        P$c16 = P$oE("shape end block"),
        P$c17 = "}",
        P$c18 = P$literalExpectation("}", false),
        P$c19 = P$oE("field separator"),
        P$c20 = ",",
        P$c21 = P$literalExpectation(",", false),
        P$c22 = /^[ \n]/,
        P$c23 = P$classExpectation([" ", "\n"], false, false),
        P$c24 = function(fields) {
              return fields
            },
        P$c25 = P$oE("fields"),
        P$c26 = function(field_, field) {return field},
        P$c27 = function(field_, fields) {
             return [field_].concat(fields)
           },
        P$c28 = P$oE("field"),
        P$c29 = function(name, shape) {
              return {name, shape}
            },
        P$c30 = P$oE("field name"),
        P$c31 = function(first, rest) {
              return `${first}${rest.join('')}`
            },
        P$c32 = P$oE("shape"),
        P$c33 = function(fields) {
              return fields || []
            },

        P$cP          = 0,
        P$sP         = 0,
        P$posDetailsCache  = [{ line: 1, column: 1 }],
        P$maxFailPos       = 0,
        P$maxFailExpected  = [],
        P$siF      = 0,

        P$result;

    if ("startRule" in options) {
      if (!(options.startRule in P$sRFs)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      P$sRF = P$sRFs[options.startRule];
    }

    function text() {
      return input.substring(P$sP, P$cP);
    }

    function location() {
      return P$computeLocation(P$sP, P$cP);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : P$computeLocation(P$sP, P$cP)

      throw P$buildStructuredError(
        [P$oE(description)],
        input.substring(P$sP, P$cP),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : P$computeLocation(P$sP, P$cP)

      throw P$buildSimpleError(message, location);
    }

    function P$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function P$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function P$anyExpectation() {
      return { type: "any" };
    }

    function P$endExpectation() {
      return { type: "end" };
    }

    function P$oE(description) {
      return { type: "other", description: description };
    }

    function P$computePosDetails(pos) {
      var details = P$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!P$posDetailsCache[p]) {
          p--;
        }

        details = P$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        P$posDetailsCache[pos] = details;
        return details;
      }
    }

    function P$computeLocation(startPos, endPos) {
      var startPosDetails = P$computePosDetails(startPos),
          endPosDetails   = P$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function P$fail(expected) {
      if (P$cP < P$maxFailPos) { return; }

      if (P$cP > P$maxFailPos) {
        P$maxFailPos = P$cP;
        P$maxFailExpected = [];
      }

      P$maxFailExpected.push(expected);
    }

    function P$buildSimpleError(message, location) {
      return new P$SE(message, null, null, location);
    }

    function P$buildStructuredError(expected, found, location) {
      return new P$SE(
        P$SE.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function P$parsestart() {
      var s0;

      s0 = P$parsecomposition();

      return s0;
    }

    function P$parse_() {
      var s0, s1;

      P$siF++;
      s0 = [];
      if (P$c1.test(input.charAt(P$cP))) {
        s1 = input.charAt(P$cP);
        P$cP++;
      } else {
        s1 = P$F;
        if (P$siF === 0) { P$fail(P$c2); }
      }
      while (s1 !== P$F) {
        s0.push(s1);
        if (P$c1.test(input.charAt(P$cP))) {
          s1 = input.charAt(P$cP);
          P$cP++;
        } else {
          s1 = P$F;
          if (P$siF === 0) { P$fail(P$c2); }
        }
      }
      P$siF--;
      if (s0 === P$F) {
        s1 = P$F;
        if (P$siF === 0) { P$fail(P$c0); }
      }

      return s0;
    }

    function P$parseNUM() {
      var s0, s1;

      P$siF++;
      if (P$c4.test(input.charAt(P$cP))) {
        s0 = input.charAt(P$cP);
        P$cP++;
      } else {
        s0 = P$F;
        if (P$siF === 0) { P$fail(P$c5); }
      }
      P$siF--;
      if (s0 === P$F) {
        s1 = P$F;
        if (P$siF === 0) { P$fail(P$c3); }
      }

      return s0;
    }

    function P$parseALPHA_() {
      var s0, s1;

      P$siF++;
      if (P$c7.test(input.charAt(P$cP))) {
        s0 = input.charAt(P$cP);
        P$cP++;
      } else {
        s0 = P$F;
        if (P$siF === 0) { P$fail(P$c8); }
      }
      if (s0 === P$F) {
        if (P$c9.test(input.charAt(P$cP))) {
          s0 = input.charAt(P$cP);
          P$cP++;
        } else {
          s0 = P$F;
          if (P$siF === 0) { P$fail(P$c10); }
        }
      }
      P$siF--;
      if (s0 === P$F) {
        s1 = P$F;
        if (P$siF === 0) { P$fail(P$c6); }
      }

      return s0;
    }

    function P$parseWORD() {
      var s0, s1;

      P$siF++;
      s0 = P$cP;
      s1 = P$parseALPHA_();
      if (s1 === P$F) {
        s1 = P$parseNUM();
      }
      if (s1 !== P$F) {
        P$sP = s0;
        s1 = P$c12(s1);
      }
      s0 = s1;
      P$siF--;
      if (s0 === P$F) {
        s1 = P$F;
        if (P$siF === 0) { P$fail(P$c11); }
      }

      return s0;
    }

    function P$parseSHAPE_START() {
      var s0, s1, s2, s3;

      P$siF++;
      s0 = P$cP;
      s1 = P$parse_();
      if (s1 !== P$F) {
        if (input.charCodeAt(P$cP) === 123) {
          s2 = P$c14;
          P$cP++;
        } else {
          s2 = P$F;
          if (P$siF === 0) { P$fail(P$c15); }
        }
        if (s2 !== P$F) {
          s3 = P$parse_();
          if (s3 !== P$F) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            P$cP = s0;
            s0 = P$F;
          }
        } else {
          P$cP = s0;
          s0 = P$F;
        }
      } else {
        P$cP = s0;
        s0 = P$F;
      }
      P$siF--;
      if (s0 === P$F) {
        s1 = P$F;
        if (P$siF === 0) { P$fail(P$c13); }
      }

      return s0;
    }

    function P$parseSHAPE_END() {
      var s0, s1, s2, s3;

      P$siF++;
      s0 = P$cP;
      s1 = [];
      s2 = P$parseFIELD_SEP();
      while (s2 !== P$F) {
        s1.push(s2);
        s2 = P$parseFIELD_SEP();
      }
      if (s1 !== P$F) {
        s2 = P$parse_();
        if (s2 !== P$F) {
          if (input.charCodeAt(P$cP) === 125) {
            s3 = P$c17;
            P$cP++;
          } else {
            s3 = P$F;
            if (P$siF === 0) { P$fail(P$c18); }
          }
          if (s3 !== P$F) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            P$cP = s0;
            s0 = P$F;
          }
        } else {
          P$cP = s0;
          s0 = P$F;
        }
      } else {
        P$cP = s0;
        s0 = P$F;
      }
      P$siF--;
      if (s0 === P$F) {
        s1 = P$F;
        if (P$siF === 0) { P$fail(P$c16); }
      }

      return s0;
    }

    function P$parseFIELD_SEP() {
      var s0, s1, s2, s3;

      P$siF++;
      s0 = P$cP;
      s1 = P$parse_();
      if (s1 !== P$F) {
        if (input.charCodeAt(P$cP) === 44) {
          s2 = P$c20;
          P$cP++;
        } else {
          s2 = P$F;
          if (P$siF === 0) { P$fail(P$c21); }
        }
        if (s2 !== P$F) {
          s3 = P$parse_();
          if (s3 !== P$F) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            P$cP = s0;
            s0 = P$F;
          }
        } else {
          P$cP = s0;
          s0 = P$F;
        }
      } else {
        P$cP = s0;
        s0 = P$F;
      }
      if (s0 === P$F) {
        s0 = P$cP;
        if (P$c22.test(input.charAt(P$cP))) {
          s1 = input.charAt(P$cP);
          P$cP++;
        } else {
          s1 = P$F;
          if (P$siF === 0) { P$fail(P$c23); }
        }
        if (s1 !== P$F) {
          s2 = P$parse_();
          if (s2 !== P$F) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            P$cP = s0;
            s0 = P$F;
          }
        } else {
          P$cP = s0;
          s0 = P$F;
        }
      }
      P$siF--;
      if (s0 === P$F) {
        s1 = P$F;
        if (P$siF === 0) { P$fail(P$c19); }
      }

      return s0;
    }

    function P$parsecomposition() {
      var s0, s1, s2, s3;

      s0 = P$cP;
      s1 = P$parse_();
      if (s1 !== P$F) {
        s2 = P$parsefields();
        if (s2 !== P$F) {
          s3 = P$parse_();
          if (s3 !== P$F) {
            P$sP = s0;
            s1 = P$c24(s2);
            s0 = s1;
          } else {
            P$cP = s0;
            s0 = P$F;
          }
        } else {
          P$cP = s0;
          s0 = P$F;
        }
      } else {
        P$cP = s0;
        s0 = P$F;
      }

      return s0;
    }

    function P$parsefields() {
      var s0, s1, s2, s3, s4, s5;

      P$siF++;
      s0 = P$cP;
      s1 = P$parsefield();
      if (s1 !== P$F) {
        s2 = [];
        s3 = P$cP;
        s4 = P$parseFIELD_SEP();
        if (s4 !== P$F) {
          s5 = P$parsefield();
          if (s5 !== P$F) {
            P$sP = s3;
            s4 = P$c26(s1, s5);
            s3 = s4;
          } else {
            P$cP = s3;
            s3 = P$F;
          }
        } else {
          P$cP = s3;
          s3 = P$F;
        }
        while (s3 !== P$F) {
          s2.push(s3);
          s3 = P$cP;
          s4 = P$parseFIELD_SEP();
          if (s4 !== P$F) {
            s5 = P$parsefield();
            if (s5 !== P$F) {
              P$sP = s3;
              s4 = P$c26(s1, s5);
              s3 = s4;
            } else {
              P$cP = s3;
              s3 = P$F;
            }
          } else {
            P$cP = s3;
            s3 = P$F;
          }
        }
        if (s2 !== P$F) {
          P$sP = s0;
          s1 = P$c27(s1, s2);
          s0 = s1;
        } else {
          P$cP = s0;
          s0 = P$F;
        }
      } else {
        P$cP = s0;
        s0 = P$F;
      }
      P$siF--;
      if (s0 === P$F) {
        s1 = P$F;
        if (P$siF === 0) { P$fail(P$c25); }
      }

      return s0;
    }

    function P$parsefield() {
      var s0, s1, s2;

      P$siF++;
      s0 = P$cP;
      s1 = P$parsefieldName();
      if (s1 !== P$F) {
        s2 = P$parseshape();
        if (s2 === P$F) {
          s2 = null;
        }
        if (s2 !== P$F) {
          P$sP = s0;
          s1 = P$c29(s1, s2);
          s0 = s1;
        } else {
          P$cP = s0;
          s0 = P$F;
        }
      } else {
        P$cP = s0;
        s0 = P$F;
      }
      P$siF--;
      if (s0 === P$F) {
        s1 = P$F;
        if (P$siF === 0) { P$fail(P$c28); }
      }

      return s0;
    }

    function P$parsefieldName() {
      var s0, s1, s2, s3;

      P$siF++;
      s0 = P$cP;
      s1 = P$parseALPHA_();
      if (s1 !== P$F) {
        s2 = [];
        s3 = P$parseWORD();
        while (s3 !== P$F) {
          s2.push(s3);
          s3 = P$parseWORD();
        }
        if (s2 !== P$F) {
          P$sP = s0;
          s1 = P$c31(s1, s2);
          s0 = s1;
        } else {
          P$cP = s0;
          s0 = P$F;
        }
      } else {
        P$cP = s0;
        s0 = P$F;
      }
      P$siF--;
      if (s0 === P$F) {
        s1 = P$F;
        if (P$siF === 0) { P$fail(P$c30); }
      }

      return s0;
    }

    function P$parseshape() {
      var s0, s1, s2, s3;

      P$siF++;
      s0 = P$cP;
      s1 = P$parseSHAPE_START();
      if (s1 !== P$F) {
        s2 = P$parsefields();
        if (s2 === P$F) {
          s2 = null;
        }
        if (s2 !== P$F) {
          s3 = P$parseSHAPE_END();
          if (s3 !== P$F) {
            P$sP = s0;
            s1 = P$c33(s2);
            s0 = s1;
          } else {
            P$cP = s0;
            s0 = P$F;
          }
        } else {
          P$cP = s0;
          s0 = P$F;
        }
      } else {
        P$cP = s0;
        s0 = P$F;
      }
      P$siF--;
      if (s0 === P$F) {
        s1 = P$F;
        if (P$siF === 0) { P$fail(P$c32); }
      }

      return s0;
    }

    P$result = P$sRF();

    if (P$result !== P$F && P$cP === input.length) {
      return P$result;
    } else {
      if (P$result !== P$F && P$cP < input.length) {
        P$fail(P$endExpectation());
      }

      throw P$buildStructuredError(
        P$maxFailExpected,
        P$maxFailPos < input.length ? input.charAt(P$maxFailPos) : null,
        P$maxFailPos < input.length
          ? P$computeLocation(P$maxFailPos, P$maxFailPos + 1)
          : P$computeLocation(P$maxFailPos, P$maxFailPos)
      );
    }
  }

  return {
    SE: P$SE,
    parse:       P$parse
  };
})();
